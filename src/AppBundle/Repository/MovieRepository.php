<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
    // on récupère toutes les années
    public function getAllYears()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->addSelect('a')
            // on les groupe par année
            ->addGroupBy('a.year')
            // ordre décroissant
            ->addOrderBy('a.year', 'DESC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findMoviesWithGenre($genreId = null, $yearMin = null, $yearMax = null, $keyword = null)
    {
        // pas besoin de préciser pour quelle classe on crée le query builder puisqu'on est dans le movie repository
        $qb = $this->createQueryBuilder('m');

        $qb->join('m.genre', 'g')
            // pour ajouter la selection des genres à la requête
            ->addSelect('g');

        // genres
        if ($genreId) {
            //si j'ai un genre alors dans mon querybuilder j'ajouter un andWhere
            // m.genre est égal à g donc on utilise g dans le g = :genreId
            $qb->andWhere('g =:genreId')
                ->setParameter("genreId", $genreId);

        }
        // si année min et année max sont sélectionnées alors on fait la recherche entre les 2 valeurs
        if ($yearMin AND $yearMax) {
            $qb->andWhere('m.year BETWEEN :yearMin AND :yearMax')
                ->setParameter("yearMin", $yearMin)
                ->setParameter("yearMax", $yearMax);
        } elseif ($yearMin) { // sinon si on a uniquement l'année min, on recherche à partir de cette valeur
            $qb->andWhere('m.year > :yearMin')
                ->setParameter("yearMin", $yearMin);
        } elseif ($yearMax) { // sinon si on a uniquement l'année max, on recherche à partir de cette valeur
            $qb->andWhere('m.year < :yearMax')
                ->setParameter("yearMax", $yearMax);
        }

        if ($keyword) {
            $qb
                // actors est la variable présente dans movie.php
                ->join('m.actors', 'a')
                ->join('m.directors', 'd')
                ->join('m.writers', 'w');
            // on recherche le keyword dans la colonne name de la table actors avec un 'like :' pour sécuriser la requête
            $qb
                ->andWhere('a.name like :keyword')
                ->orWhere('d.name like :keyword')
                ->orWhere('w.name like :keyword')
                ->orWhere('m.title like :keyword')
                ->setParameter("keyword", '%' . $keyword . '%');
        }

        $qb->setMaxResults(50);
        $query = $qb->getQuery();

        // Paginator permet de régler un problème : sans ça, en tapant juste 'e' dans la recherche, on avait 2 films alors
        // qu'il y a plein de film qui ont un e (dans le titre, le nom de l'acteur...)
        return new Paginator($query);
    }


    public function findMoviesWatch($connected)
    {
        $qb = $this->createQueryBuilder('m');
        $qb
            ->join('m.watchlistItem', 'w')
            ->andWhere('w.user = :user')
            ->setParameter('user', $connected)
            ->addOrderBy('w.dateCreated', 'DESC');

        $query = $qb->getQuery();
        $query = $query->getResult();
        return $query;
    }

}